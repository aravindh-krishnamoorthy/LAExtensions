using LinearAlgebra
using BenchmarkTools

# N = 8
N = 8
# Real
X = randn(N,N)
@btime sqrt(X)
@btime MatrixAlgorithms.sqrtm(X)
X1 = MatrixAlgorithms.sqrtm(X)
display(norm(X1*X1-X))
@btime sqrt(X+X')
@btime MatrixAlgorithms.sqrtm(X+X')
X1 = MatrixAlgorithms.sqrtm(X+X')
display(norm(X1*X1-X-X'))
@btime sqrt(X+N*I(N))
@btime MatrixAlgorithms.sqrtm(X+N*I(N))
X1 = MatrixAlgorithms.sqrtm(X+N*I(N))
display(norm(X1*X1-X-N*I(N)))
@btime sqrt(X+X'+N*I(N))
@btime MatrixAlgorithms.sqrtm(X+X'+N*I(N))
X1 = MatrixAlgorithms.sqrtm(X+X'+N*I(N))
display(norm(X1*X1-X-X'-N*I(N)))
# Complex
X = complex.(randn(N,N),randn(N,N))
@btime sqrt(X)
@btime MatrixAlgorithms.sqrtm(X)
X1 = MatrixAlgorithms.sqrtm(X)
display(norm(X1*X1-X))
@btime sqrt(X+X')
@btime MatrixAlgorithms.sqrtm(X+X')
X1 = MatrixAlgorithms.sqrtm(X+X')
display(norm(X1*X1-X-X'))
@btime sqrt(X+N*I(N))
@btime MatrixAlgorithms.sqrtm(X+N*I(N))
X1 = MatrixAlgorithms.sqrtm(X+N*I(N))
display(norm(X1*X1-X-N*I(N)))
@btime sqrt(X+X'+N*I(N))
@btime MatrixAlgorithms.sqrtm(X+X'+N*I(N))
X1 = MatrixAlgorithms.sqrtm(X+X'+N*I(N))
display(norm(X1*X1-X-X'-N*I(N)))

# N = 1000
N = 1000
# Real
X = randn(N,N)
@btime sqrt(X)
@btime MatrixAlgorithms.sqrtm(X)
X1 = MatrixAlgorithms.sqrtm(X)
display(norm(X1*X1-X))
@btime sqrt(X+X')
@btime MatrixAlgorithms.sqrtm(X+X')
X1 = MatrixAlgorithms.sqrtm(X+X')
display(norm(X1*X1-X-X'))
@btime sqrt(X+N*I(N))
@btime MatrixAlgorithms.sqrtm(X+N*I(N))
X1 = MatrixAlgorithms.sqrtm(X+N*I(N))
display(norm(X1*X1-X-N*I(N)))
@btime sqrt(X+X'+N*I(N))
@btime MatrixAlgorithms.sqrtm(X+X'+N*I(N))
X1 = MatrixAlgorithms.sqrtm(X+X'+N*I(N))
display(norm(X1*X1-X-X'-N*I(N)))
# Complex
X = complex.(randn(N,N),randn(N,N))
@btime sqrt(X)
@btime MatrixAlgorithms.sqrtm(X)
X1 = MatrixAlgorithms.sqrtm(X)
display(norm(X1*X1-X))
@btime sqrt(X+X')
@btime MatrixAlgorithms.sqrtm(X+X')
X1 = MatrixAlgorithms.sqrtm(X+X')
display(norm(X1*X1-X-X'))
@btime sqrt(X+N*I(N))
@btime MatrixAlgorithms.sqrtm(X+N*I(N))
X1 = MatrixAlgorithms.sqrtm(X+N*I(N))
display(norm(X1*X1-X-N*I(N)))
@btime sqrt(X+X'+N*I(N))
@btime MatrixAlgorithms.sqrtm(X+X'+N*I(N))
X1 = MatrixAlgorithms.sqrtm(X+X'+N*I(N))
display(norm(X1*X1-X-X'-N*I(N)))
